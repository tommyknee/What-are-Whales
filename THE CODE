library(zoo)
library(RCurl)
library(dplyr)
library(mapproj)
library(ggplot2)
library(fiftystater)

rawWeb <- getURL("https://raw.githubusercontent.com/washingtonpost/data-police-shootings/master/fatal-police-shootings-data.csv")
csv <- read.csv(text = rawWeb)
pd <- csv[1:1954,] # Removing data from 2017 because it is incomplete. We will analyze data from Jan 2015 to Dec 2016.

##########################################
# Prepare data frame
##########################################

# Replace "male" with 1 and "female" with 0
pd$gender_fact <- ifelse(pd$gender=="M",1,0)

# Replace "true" (yes--signs of mental illness) with 1 and "false" (no mental illness) with 0
pd$signs_of_mental_illness <- ifelse(pd$signs_of_mental_illness=="True",1,0)

# Replace "unarmed" with 1 and otherwise 0
pd$unarmed <- ifelse(pd$armed=="unarmed",1,0)

# Change date column into R date format
pd$date <- as.Date(pd$date)

# Factor variable "race"
pd$race <- as.factor(pd$race)
levels(pd$race)

# Factor the variable "threat_level"
pd$threat_level <- as.factor(pd$threat_level)
levels(pd$threat_level)

pd$body_camera <- ifelse(pd$body_camera=="True",1,0)

# Create year and month columns
pd$year <- NA
pd$month <- NA

for (i in 1:length(pd$date)){
  date=as.character(pd$date[i])
  splitDate=unlist(strsplit(date,"-"))
  pd$year[i]=splitDate[1]
  pd$month[i]=splitDate[2]
}

# Explore data
quantile(pd$age,na.rm=T)
table(pd$year)
prop.table(table(pd$race))
prop.table(table(pd$state,pd$race),1)
prop.table(table(pd$race,pd$ageGroup),2)
prop.table(table(pd$unarmed,pd$race),2)
prop.table(table(pd$body_camera,pd$race),2)
prop.table(table(pd$race,pd$attack),1)
prop.table(table(pd$signs_of_mental_illness,pd$race),2)

df <- aggregate(pd,by=list(pd$race),FUN=mean,na.rm=T)
df<-df[,c(1,7,12,15,16,17,21)]
df


##########################################
# Time series plots (Jan 2015-Dec 2016)
##########################################

# Create variables of the month of each observation:
pd$bymonth <- as.Date(cut(pd$date,
                         breaks = "month"))
pd$count <- 1
# Bar graph by month:
ggplot(data = pd,
       aes(bymonth, count)) +
  stat_summary(fun.y = sum, # adds up all observations for the month
               geom = "bar")+
  stat_summary(aes(bymonth, body_camera),fun.y = sum,
               geom = "bar",color=2)

# Scatterplot by month
ggplot(data = pd,
       aes(bymonth, body_camera)) +
  stat_summary(fun.y = sum, # adds up all observations for the month
               geom = "point")


######################################
# Other ggplot graphs
######################################

pd$ageGroup <- NA
pd$ageGroup[pd$age<18] <- "<18"
pd$ageGroup[pd$age>=18&pd$age<25] <- "18-24"
pd$ageGroup[pd$age>=25&pd$age<35] <- "25-34"
pd$ageGroup[pd$age>=35&pd$age<45] <- "35-44"
pd$ageGroup[pd$age>=45&pd$age<55] <- "45-54"
pd$ageGroup[pd$age>=55&pd$age<=65] <- "55-65"
pd$ageGroup[pd$age>65] <- "65+"

table(pd$ageGroup)
pd$threat_level<-ifelse(pd$threat_level=="attack",1,0)
# Bar graph by month:
ggplot(data = pd[pd$year!=2017,],
       aes(ageGroup, count)) +
  stat_summary(fun.y = sum, # adds up all observations for the month
               geom = "bar")+
  stat_summary(aes(ageGroup,threat_level),fun.y = sum,
               geom = "bar",color=2)
               
# Bar graph of race and threat level:
ggplot(data = pd[pd$year!=2017,],
       aes(race, count)) +
     stat_summary(fun.y = sum, # adds up all observations for the month
                  geom = "bar")+
     stat_summary(aes(race,threat_level),fun.y = sum,
                  geom = "bar",color=2)

#code to look at race + threat level
qplot(x = pd$race, data = pd, fill = factor(pd$threat_level), geom= "bar")

#code to look at race+age group
pd[pd$race==""] <- NA
pd <- na.omit(pd)
qplot(x = pd$ageGroup, data = pd, fill=pd$race, geom = "bar")



##########################################
# Number of police shootings by state
##########################################

library(ggplot2)


data("fifty_states") # this line is optional due to lazy data loading

statedf<-data.frame(state=tolower(rownames(statedf)),statedf)


statedf

# map_id creates the aesthetic mapping to the state name column in your data
p <- ggplot(statedf, aes(map_id = state)) + 
  # map points to the fifty_states shape data
  geom_map(aes(fill = Freq), map = fifty_states) + 
  expand_limits(x = fifty_states$long, y = fifty_states$lat) +
  coord_map() +
  scale_x_continuous(breaks = NULL) + 
  scale_y_continuous(breaks = NULL) +
  labs(x = "", y = "") +
  theme(legend.position = "bottom", 
        panel.background = element_blank())

p


